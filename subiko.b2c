OPTION ESCAPE OFF
OPTION SHOW OFF
OPTION C_COORDS

dim puzzle[9,9] as int	'current puzzle is stored here
sprite 0, "bkg.pic"	'load background image
move 0, 0, 0		'set position of background image
sprite 1, "think.pic"	'load thinking image
move 1, 106, 62		'set position of thinking image


'=======================================================================================================================
'main menu
'=======================================================================================================================

while 1
	dim choice as int
	cls
	ink BLACK
	print "subiko!"
	print "by frost sheridan"
	menuxy 0, 30, choice, "easy puzzles", "medium puzzles", "hard puzzles", "load custom pack", "exit"

	if choice = 1 then
		call open_packaged_file("easy.spp")
	elseif choice = 2 then
		call open_packaged_file("medium.spp")
	elseif choice = 3 then
		call open_packaged_file("hard.spp")
	elseif choice = 4 then
		call open_custom_file
	else
		exit while
	endif
wend
exit program


'=======================================================================================================================
'puzzle loading
'=======================================================================================================================

'execution path: open_*_file --> parse_file --> game_loop


'show file picker for loading custom puzzle pack
sub open_custom_file
	dim filename[32] as char
	dim file_selected as int
	cls

	file_selected = filelist("select puzzle pack:", "*.spp", filename)
	if file_selected then
		open filename for read as 1
		if error <> 0 then
			close 1
			print "file error ", error, "!"
			print "press <enter>"
			while key(#KEY_ENTER) = 0
			wend
		else
			call parse_file
		endif
	endif
end sub


'load a file that's built in to the app
sub open_packaged_file(filename[] as char)
	remove filename			'make sure file doesn't exist already
	load(filename)			'load file from app package
	open filename for read as 1
	call parse_file
	remove filename
end sub


'load and parse a puzzle pack
sub parse_file
	dim data as char
	dim num_puzzles as int
	dim selected as int
	cls

	'read the first two bytes as decimal digits representing the number of puzzles in the pack (00-99)
	get 1, 0, data
	num_puzzles = (data - \0\) * 10
	get 1, 1, data
	num_puzzles = num_puzzles + (data - \0\)
	print num_puzzles, " puzzles in pack"

	'ask user for puzzle number to load
	while 1
		input "enter puzzle number:", selected
		if selected >= 1 and selected <= num_puzzles then exit while
		print "invalid entry!"
	wend

	'read through all the numbers in the file and load them left-to-right, top-to-bottom
	print "loading..."
	dim start_index as int
	start_index = 3 + ((selected - 1) * 82)
	for i = 0 to 80
			
		'read character
		get 1, i + start_index, data

		'abort file loading if there was any error
		if error <> 0 then
			close 1
			print "file error ", error, "!"
			print "press <enter>"
			while key(#KEY_ENTER) = 0
			wend
			exit sub
		endif
			
		'add character to puzzle if it's a number
		if data >= \0\ and data <= \9\ then
			puzzle[i MOD 9, i / 9] = data - \0\
		endif
	next
	close 1
	call game_loop
end sub


'=======================================================================================================================
'actual game logic
'=======================================================================================================================

dim cur_x as int
dim cur_y as int
dim operation_running as int

sub game_loop
	'initialize game
	cur_x = 0
	cur_y = 0
	operation_running = 0
	call game_draw(0)
	
	'game loop
	while 1
		'test for d-pad and other function keys
		if key(#KEY_LEFT) and cur_x > 0 then
			cur_x = cur_x - 1
			call game_draw(0)
		elseif key(#KEY_RIGHT) and cur_x < 8 then
			cur_x = cur_x + 1
			call game_draw(0)
		elseif key(#KEY_UP) and cur_y > 0 then
			cur_y = cur_y - 1
			call game_draw(0)
		elseif key(#KEY_DOWN) and cur_y < 8 then
			cur_y = cur_y + 1
			call game_draw(0)
		elseif key(#KEY_C) then
			call calc_candidates
			call game_draw(0)
		elseif key(#KEY_A) then
			call do_auto_fill
			call game_draw(0)
		elseif key(#KEY_X) then
			if dialog("exit game?", "are you sure you want to exit? all progress will be lost!") then exit sub
			call game_draw(0)
		elseif key(#KEY_DEL) then
			puzzle[cur_x,cur_y] = 0
			call game_draw(0)
		endif

		'test for number keys
		for i=49 to 57 step 1
			if key(i) then
				dim num as int
				num = i - 48
				if is_candidate(cur_x, cur_y, num) then
					if key(275) or get_cell_number(cur_x, cur_y) > 0 then 'shift key
						puzzle[cur_x,cur_y] = num
						clear_cand_from_region(cur_x, cur_y, num)
					else
						toggle_cell_cand(cur_x, cur_y, num)
					endif
					call game_draw(0)
				else
					vibrate 128
					beep 0
					wait 1
					vibrate 0
					beep -1
				endif
				
			endif
		next
	wend
end sub


sub game_draw(show_loading as int)
	'draw background image with grid and control info
	cls
	redraw 0
	
	'draw cell contents
	font "mini_bold_font"
	for x=0 to 8 step 1
		for y=0 to 8 step 1
			'figure out top left corner coordinates of cell
			dim cell_x as int
			dim cell_y as int
			cell_x = x * 11 + 2
			cell_y = y * 11 + 2

			'the highlighted cell will have its contents drawn as black and have a gray background
			if x = cur_x and y = cur_y then
				ink LTGREY
				rectfill cell_x - 1, cell_y - 1, 10, 10
				ink BLACK
			else
				ink LTGREY
			endif

			dim num as int
			num = get_cell_number(x, y)
			
			'draw cell candidiates if the cell is not filled in
			if num = 0 then
				for c=0 to 8 step 1
					if get_cell_cand(x, y, c + 1) then rectfill cell_x + c MOD 3 * 3, cell_y + c / 3 * 3, 2, 2
				next
			else
				printxy cell_x + 1, cell_y, num
			endif
		next
	next
	ink BLACK
	font "cool_bold_font"

	'draw loading icon if requested
	if show_loading then redraw 1

	redraw show
end sub


sub calc_candidates
	call game_draw(1)
	rect 0, 20, 75, 11
	for x=0 to 8 step 1
		for y=0 to 8 step 1
			if get_cell_number(x, y) = 0 then puzzle[x,y] = 8176
			for c=1 to 9 step 1
				if not is_candidate(x, y, c) then call clear_cell_cand(x, y, c)
			next
		next
	next
end sub


sub do_auto_fill
	dim any_fills_done as int
	any_fills_done = 1
	while any_fills_done = 1
		any_fills_done = 0
		call game_draw(1)
		for x=0 to 8 step 1
			for y=0 to 8 step 1
				dim c as int
				c = get_cell_first_cand(x, y)
				if c > 0 then
					puzzle[x,y] = c
					clear_cand_from_region(x, y, c)
					any_fills_done = 1
				endif
			next
		next
	wend
end sub


'=======================================================================================================================
'functions to read/write board
'=======================================================================================================================

'the cell number is stored in the lower 4 bits of the cell

function get_cell_number(x as int, y as int) as int
	get_cell_number = puzzle[x,y] MOD 16
end function


function is_candidate(x as int, y as int, c as int) as int
	dim bx as int
	dim by as int
	bx = x / 3 * 3
	by = y / 3 * 3
	for i=0 to 8
		if puzzle[i,y] = c or puzzle[x,i] = c or puzzle[bx + i MOD 3, by + i / 3] = c then
			is_candidate = 0
			exit function
		endif
	next
	is_candidate = 1
end function


'the cell candidates are stored in the next 9 bits above the cell number

function get_cell_cand(x as int, y as int, c as int) as int
	inline return (puzzle[x][y] >> (c + 3)) & 1;
end function


function get_cell_first_cand(x as int, y as int) as int
	if puzzle[x,y] = 0 or get_cell_number(x, y) > 0 then
		get_cell_first_cand = 0
	else
		dim test as int
		test = 16
		for i=1 to 9
			if puzzle[x,y] = test then
				get_cell_first_cand = i
				exit function
			endif
			test = test * 2
		next
	endif
	get_cell_first_cand = 0
end function


sub set_cell_cand(x as int, y as int, c as int)
	inline puzzle[x][y] |= (int)1 << (c + 3);
end sub


sub clear_cell_cand(x as int, y as int, c as int)
	inline puzzle[x][y] &= ~((int)1 << (c + 3));
end sub


sub toggle_cell_cand(x as int, y as int, c as int)
	inline puzzle[x][y] ^= (int)1 << (c + 3);
end sub


sub clear_cand_from_region(x as int, y as int, c as int)
	dim bx as int
	dim by as int
	bx = x / 3 * 3
	by = y / 3 * 3
	for i=0 to 8
		clear_cell_cand(i, y, c);
		clear_cell_cand(x, i, c);
		clear_cell_cand(bx + i MOD 3, by + i / 3, c);
	next
end sub